
space_invaders_atoll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080022a4  080022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080022a8  080022a8  000122a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  080022ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
  7 .bss          000000b0  200000a8  200000a8  000200a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000158  20000158  000200a8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a2ef  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fae  00000000  00000000  0002a3c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000988  00000000  00000000  0002c378  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000830  00000000  00000000  0002cd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000041d1  00000000  00000000  0002d530  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000030ee  00000000  00000000  00031701  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000347ef  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002438  00000000  00000000  0003486c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00036ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800205c 	.word	0x0800205c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	0800205c 	.word	0x0800205c

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <DAC_SetChannel1Data+0x34>)
 800029e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	3308      	adds	r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	461a      	mov	r2, r3
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40007400 	.word	0x40007400

080002c4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <DMA_Init+0xac>)
 80002dc:	4013      	ands	r3, r2
 80002de:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000306:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000312:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000318:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 0307 	bic.w	r3, r3, #7
 8000332:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4313      	orrs	r3, r2
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	691a      	ldr	r2, [r3, #16]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	f01c803f 	.word	0xf01c803f

08000374 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f043 0201 	orr.w	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000392:	e005      	b.n	80003a0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f023 0201 	bic.w	r2, r3, #1
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e001      	b.n	80003ce <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a15      	ldr	r2, [pc, #84]	; (8000448 <DMA_GetFlagStatus+0x6c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d802      	bhi.n	80003fc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <DMA_GetFlagStatus+0x70>)
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <DMA_GetFlagStatus+0x74>)
 80003fe:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	e002      	b.n	8000418 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800041e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000422:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	4013      	ands	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800042e:	2301      	movs	r3, #1
 8000430:	75fb      	strb	r3, [r7, #23]
 8000432:	e001      	b.n	8000438 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000438:	7dfb      	ldrb	r3, [r7, #23]
}
 800043a:	4618      	mov	r0, r3
 800043c:	371c      	adds	r7, #28
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	4002640f 	.word	0x4002640f
 800044c:	40026000 	.word	0x40026000
 8000450:	40026400 	.word	0x40026400

08000454 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <DMA_ClearFlag+0x50>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d802      	bhi.n	800046c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <DMA_ClearFlag+0x54>)
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e001      	b.n	8000470 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <DMA_ClearFlag+0x58>)
 800046e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d007      	beq.n	800048a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000480:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000488:	e006      	b.n	8000498 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000490:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	6093      	str	r3, [r2, #8]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	4002640f 	.word	0x4002640f
 80004a8:	40026000 	.word	0x40026000
 80004ac:	40026400 	.word	0x40026400

080004b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e076      	b.n	80005ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004cc:	2201      	movs	r2, #1
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d165      	bne.n	80005b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	401a      	ands	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	4619      	mov	r1, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d003      	beq.n	8000526 <GPIO_Init+0x76>
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d12e      	bne.n	8000584 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	4619      	mov	r1, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	b29b      	uxth	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7992      	ldrb	r2, [r2, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	b292      	uxth	r2, r2
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	b292      	uxth	r2, r2
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	b29b      	uxth	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d985      	bls.n	80004cc <GPIO_Init+0x1c>
    }
  }
}
 80005c0:	bf00      	nop
 80005c2:	371c      	adds	r7, #28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
 80005d8:	4613      	mov	r3, r2
 80005da:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005e4:	787a      	ldrb	r2, [r7, #1]
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	b29b      	uxth	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3208      	adds	r2, #8
 8000608:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	210f      	movs	r1, #15
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43db      	mvns	r3, r3
 800061c:	ea02 0103 	and.w	r1, r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f100 0208 	add.w	r2, r0, #8
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	b29b      	uxth	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3208      	adds	r2, #8
 8000636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4313      	orrs	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000640:	887b      	ldrh	r3, [r7, #2]
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	b29b      	uxth	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3208      	adds	r2, #8
 800064c:	68b9      	ldr	r1, [r7, #8]
 800064e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000660:	b480      	push	{r7}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	2302      	movs	r3, #2
 800067e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000680:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f003 030c 	and.w	r3, r3, #12
 8000688:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d007      	beq.n	80006a0 <RCC_GetClocksFreq+0x40>
 8000690:	2b08      	cmp	r3, #8
 8000692:	d009      	beq.n	80006a8 <RCC_GetClocksFreq+0x48>
 8000694:	2b00      	cmp	r3, #0
 8000696:	d13d      	bne.n	8000714 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a42      	ldr	r2, [pc, #264]	; (80007a4 <RCC_GetClocksFreq+0x144>)
 800069c:	601a      	str	r2, [r3, #0]
      break;
 800069e:	e03d      	b.n	800071c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a41      	ldr	r2, [pc, #260]	; (80007a8 <RCC_GetClocksFreq+0x148>)
 80006a4:	601a      	str	r2, [r3, #0]
      break;
 80006a6:	e039      	b.n	800071c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006a8:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	0d9b      	lsrs	r3, r3, #22
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006b4:	4b3a      	ldr	r3, [pc, #232]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006bc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00c      	beq.n	80006de <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006c4:	4a38      	ldr	r2, [pc, #224]	; (80007a8 <RCC_GetClocksFreq+0x148>)
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	4a34      	ldr	r2, [pc, #208]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006ce:	6852      	ldr	r2, [r2, #4]
 80006d0:	0992      	lsrs	r2, r2, #6
 80006d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	e00b      	b.n	80006f6 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <RCC_GetClocksFreq+0x144>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006e8:	6852      	ldr	r2, [r2, #4]
 80006ea:	0992      	lsrs	r2, r2, #6
 80006ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006f0:	fb02 f303 	mul.w	r3, r2, r3
 80006f4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	0c1b      	lsrs	r3, r3, #16
 80006fc:	f003 0303 	and.w	r3, r3, #3
 8000700:	3301      	adds	r3, #1
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	fbb2 f2f3 	udiv	r2, r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
      break;
 8000712:	e003      	b.n	800071c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <RCC_GetClocksFreq+0x144>)
 8000718:	601a      	str	r2, [r3, #0]
      break;
 800071a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000724:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	091b      	lsrs	r3, r3, #4
 800072a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800072c:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <RCC_GetClocksFreq+0x14c>)
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	40da      	lsrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800074c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	0a9b      	lsrs	r3, r3, #10
 8000752:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000754:	4a15      	ldr	r2, [pc, #84]	; (80007ac <RCC_GetClocksFreq+0x14c>)
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	40da      	lsrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <RCC_GetClocksFreq+0x140>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000774:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	0b5b      	lsrs	r3, r3, #13
 800077a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800077c:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <RCC_GetClocksFreq+0x14c>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	40da      	lsrs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	60da      	str	r2, [r3, #12]
}
 8000794:	bf00      	nop
 8000796:	3724      	adds	r7, #36	; 0x24
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40023800 	.word	0x40023800
 80007a4:	00f42400 	.word	0x00f42400
 80007a8:	007a1200 	.word	0x007a1200
 80007ac:	20000000 	.word	0x20000000

080007b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d006      	beq.n	80007d0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007c2:	490a      	ldr	r1, [pc, #40]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007ce:	e006      	b.n	80007de <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	43db      	mvns	r3, r3
 80007da:	4013      	ands	r3, r2
 80007dc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000802:	490a      	ldr	r1, [pc, #40]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800080e:	e006      	b.n	800081e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <RCC_APB1PeriphClockCmd+0x3c>)
 8000814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	43db      	mvns	r3, r3
 800081a:	4013      	ands	r3, r2
 800081c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	887a      	ldrh	r2, [r7, #2]
 8000840:	819a      	strh	r2, [r3, #12]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	460b      	mov	r3, r1
 8000858:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	891b      	ldrh	r3, [r3, #8]
 8000862:	b29a      	uxth	r2, r3
 8000864:	887b      	ldrh	r3, [r7, #2]
 8000866:	4013      	ands	r3, r2
 8000868:	b29b      	uxth	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e001      	b.n	8000878 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	8a1b      	ldrh	r3, [r3, #16]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	88db      	ldrh	r3, [r3, #6]
 80008b6:	461a      	mov	r2, r3
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	4313      	orrs	r3, r2
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	899b      	ldrh	r3, [r3, #12]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80008d4:	f023 030c 	bic.w	r3, r3, #12
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	889a      	ldrh	r2, [r3, #4]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	891b      	ldrh	r3, [r3, #8]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	4313      	orrs	r3, r2
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	8a9b      	ldrh	r3, [r3, #20]
 8000902:	b29b      	uxth	r3, r3
 8000904:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800090c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	899b      	ldrh	r3, [r3, #12]
 8000912:	461a      	mov	r2, r3
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	4313      	orrs	r3, r2
 8000918:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	b29a      	uxth	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe9a 	bl	8000660 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a30      	ldr	r2, [pc, #192]	; (80009f0 <USART_Init+0x168>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d003      	beq.n	800093c <USART_Init+0xb4>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <USART_Init+0x16c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d102      	bne.n	8000942 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	e001      	b.n	8000946 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	899b      	ldrh	r3, [r3, #12]
 800094a:	b29b      	uxth	r3, r3
 800094c:	b21b      	sxth	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	da0c      	bge.n	800096c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000952:	6a3a      	ldr	r2, [r7, #32]
 8000954:	4613      	mov	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	009a      	lsls	r2, r3, #2
 800095c:	441a      	add	r2, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fbb2 f3f3 	udiv	r3, r2, r3
 8000968:	61fb      	str	r3, [r7, #28]
 800096a:	e00b      	b.n	8000984 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800096c:	6a3a      	ldr	r2, [r7, #32]
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	009a      	lsls	r2, r3, #2
 8000976:	441a      	add	r2, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <USART_Init+0x170>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	095b      	lsrs	r3, r3, #5
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	2264      	movs	r2, #100	; 0x64
 8000998:	fb02 f303 	mul.w	r3, r2, r3
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	899b      	ldrh	r3, [r3, #12]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da0c      	bge.n	80009c8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	3332      	adds	r3, #50	; 0x32
 80009b4:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <USART_Init+0x170>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	f003 0307 	and.w	r3, r3, #7
 80009c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c2:	4313      	orrs	r3, r2
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
 80009c6:	e00b      	b.n	80009e0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	3332      	adds	r3, #50	; 0x32
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <USART_Init+0x170>)
 80009d0:	fba2 2303 	umull	r2, r3, r2, r3
 80009d4:	095b      	lsrs	r3, r3, #5
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009dc:	4313      	orrs	r3, r2
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	811a      	strh	r2, [r3, #8]
}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40011400 	.word	0x40011400
 80009f8:	51eb851f 	.word	0x51eb851f

080009fc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	899b      	ldrh	r3, [r3, #12]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a1e:	e007      	b.n	8000a30 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	899b      	ldrh	r3, [r3, #12]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	819a      	strh	r2, [r3, #12]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	095b      	lsrs	r3, r3, #5
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	f003 031f 	and.w	r3, r3, #31
 8000a70:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000a72:	2201      	movs	r2, #1
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d103      	bne.n	8000a8a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	330c      	adds	r3, #12
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e009      	b.n	8000a9e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d103      	bne.n	8000a98 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3310      	adds	r3, #16
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e002      	b.n	8000a9e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3314      	adds	r3, #20
 8000a9c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000a9e:	787b      	ldrb	r3, [r7, #1]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	6811      	ldr	r1, [r2, #0]
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ab0:	e006      	b.n	8000ac0 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	6811      	ldr	r1, [r2, #0]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	43d2      	mvns	r2, r2
 8000abc:	400a      	ands	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	095b      	lsrs	r3, r3, #5
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000afa:	2201      	movs	r2, #1
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d107      	bne.n	8000b1a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	899b      	ldrh	r3, [r3, #12]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4013      	ands	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e011      	b.n	8000b3e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d107      	bne.n	8000b30 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	8a1b      	ldrh	r3, [r3, #16]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e006      	b.n	8000b3e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	8a9b      	ldrh	r3, [r3, #20]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000b46:	2201      	movs	r2, #1
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <USART_GetITStatus+0xa4>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	74fb      	strb	r3, [r7, #19]
 8000b6e:	e001      	b.n	8000b74 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000b74:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <STM_EVAL_LEDInit+0x50>)
 8000b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b96:	2101      	movs	r1, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fe09 	bl	80007b0 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <STM_EVAL_LEDInit+0x54>)
 8000ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <STM_EVAL_LEDInit+0x58>)
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	f107 0208 	add.w	r2, r7, #8
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fc72 	bl	80004b0 <GPIO_Init>
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08002290 	.word	0x08002290
 8000bd8:	08002288 	.word	0x08002288
 8000bdc:	20000010 	.word	0x20000010

08000be0 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <STM_EVAL_LEDOn+0x28>)
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	4905      	ldr	r1, [pc, #20]	; (8000c0c <STM_EVAL_LEDOn+0x2c>)
 8000bf6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000bfa:	831a      	strh	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	20000010 	.word	0x20000010
 8000c0c:	08002288 	.word	0x08002288

08000c10 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <Audio_MAL_IRQHandler+0xe8>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <Audio_MAL_IRQHandler+0xec>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4610      	mov	r0, r2
 8000c20:	f7ff fbdc 	bl	80003dc <DMA_GetFlagStatus>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d064      	beq.n	8000cf4 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000c2a:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <Audio_MAL_IRQHandler+0xf0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d04c      	beq.n	8000ccc <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000c32:	bf00      	nop
 8000c34:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <Audio_MAL_IRQHandler+0xe8>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fbb7 	bl	80003ac <DMA_GetCmdStatus>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f7      	bne.n	8000c34 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <Audio_MAL_IRQHandler+0xe8>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <Audio_MAL_IRQHandler+0xec>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4610      	mov	r0, r2
 8000c50:	f7ff fc00 	bl	8000454 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <Audio_MAL_IRQHandler+0xf4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <Audio_MAL_IRQHandler+0xf8>)
 8000c5c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <Audio_MAL_IRQHandler+0xf0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c66:	4293      	cmp	r3, r2
 8000c68:	bf28      	it	cs
 8000c6a:	4613      	movcs	r3, r2
 8000c6c:	4a26      	ldr	r2, [pc, #152]	; (8000d08 <Audio_MAL_IRQHandler+0xf8>)
 8000c6e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <Audio_MAL_IRQHandler+0xe8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4924      	ldr	r1, [pc, #144]	; (8000d08 <Audio_MAL_IRQHandler+0xf8>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fb24 	bl	80002c4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <Audio_MAL_IRQHandler+0xe8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2101      	movs	r1, #1
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fb76 	bl	8000374 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <Audio_MAL_IRQHandler+0xf4>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <Audio_MAL_IRQHandler+0xf0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c94:	d203      	bcs.n	8000c9e <Audio_MAL_IRQHandler+0x8e>
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <Audio_MAL_IRQHandler+0xf0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	e000      	b.n	8000ca0 <Audio_MAL_IRQHandler+0x90>
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <Audio_MAL_IRQHandler+0xfc>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <Audio_MAL_IRQHandler+0xf4>)
 8000ca4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <Audio_MAL_IRQHandler+0xf0>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <Audio_MAL_IRQHandler+0xf0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	bf28      	it	cs
 8000cb6:	460b      	movcs	r3, r1
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <Audio_MAL_IRQHandler+0xf0>)
 8000cbc:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <Audio_MAL_IRQHandler+0xe8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fb55 	bl	8000374 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000cca:	e013      	b.n	8000cf4 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <Audio_MAL_IRQHandler+0xe8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fb4e 	bl	8000374 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <Audio_MAL_IRQHandler+0xe8>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <Audio_MAL_IRQHandler+0xec>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	f7ff fbb6 	bl	8000454 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <Audio_MAL_IRQHandler+0xf4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fd4d 	bl	800178e <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	2000002c 	.word	0x2000002c
 8000d00:	20000020 	.word	0x20000020
 8000d04:	200000d0 	.word	0x200000d0
 8000d08:	20000110 	.word	0x20000110
 8000d0c:	0001fffe 	.word	0x0001fffe

08000d10 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000d14:	f7ff ff7c 	bl	8000c10 <Audio_MAL_IRQHandler>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000d20:	f7ff ff76 	bl	8000c10 <Audio_MAL_IRQHandler>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <SPI3_IRQHandler+0x3c>)
 8000d30:	f7ff fd8d 	bl	800084e <SPI_I2S_GetFlagStatus>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d011      	beq.n	8000d5e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <SPI3_IRQHandler+0x40>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d106      	bne.n	8000d50 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000d42:	f000 fd2f 	bl	80017a4 <EVAL_AUDIO_GetSampleCallBack>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f7ff fa9e 	bl	800028c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000d50:	f000 fd28 	bl	80017a4 <EVAL_AUDIO_GetSampleCallBack>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4619      	mov	r1, r3
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <SPI3_IRQHandler+0x3c>)
 8000d5a:	f7ff fd69 	bl	8000830 <SPI_I2S_SendData>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40003c00 	.word	0x40003c00
 8000d68:	20000024 	.word	0x20000024

08000d6c <animation>:
#include "depl_enn.h"

extern signed char carac;

void animation()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
	int xboss;
	int yboss = 12;
 8000d72:	230c      	movs	r3, #12
 8000d74:	603b      	str	r3, [r7, #0]
	sleep_moi(100);
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f000 f908 	bl	8000f8c <sleep_moi>
	vt100_move(35, 8);
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	2023      	movs	r0, #35	; 0x23
 8000d80:	f001 f8aa 	bl	8001ed8 <vt100_move>
	serial_puts("ATTENTION");
 8000d84:	4846      	ldr	r0, [pc, #280]	; (8000ea0 <animation+0x134>)
 8000d86:	f000 ff3d 	bl	8001c04 <serial_puts>
	sleep_moi(100);
 8000d8a:	2064      	movs	r0, #100	; 0x64
 8000d8c:	f000 f8fe 	bl	8000f8c <sleep_moi>
	vt100_move(35, 9);
 8000d90:	2109      	movs	r1, #9
 8000d92:	2023      	movs	r0, #35	; 0x23
 8000d94:	f001 f8a0 	bl	8001ed8 <vt100_move>
	serial_puts("LE PATRON");
 8000d98:	4842      	ldr	r0, [pc, #264]	; (8000ea4 <animation+0x138>)
 8000d9a:	f000 ff33 	bl	8001c04 <serial_puts>
	sleep_moi(100);
 8000d9e:	2064      	movs	r0, #100	; 0x64
 8000da0:	f000 f8f4 	bl	8000f8c <sleep_moi>
	vt100_move(37, 10);
 8000da4:	210a      	movs	r1, #10
 8000da6:	2025      	movs	r0, #37	; 0x25
 8000da8:	f001 f896 	bl	8001ed8 <vt100_move>
	serial_puts("ARRIVE");
 8000dac:	483e      	ldr	r0, [pc, #248]	; (8000ea8 <animation+0x13c>)
 8000dae:	f000 ff29 	bl	8001c04 <serial_puts>
	for (xboss = 2; xboss <= 40; xboss++)
 8000db2:	2302      	movs	r3, #2
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e019      	b.n	8000dec <animation+0x80>
	{
		boss(xboss, yboss);
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 fe4a 	bl	8001a54 <boss>
		if (xboss > 2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	dd0c      	ble.n	8000de0 <animation+0x74>
		{
			vt100_move(xboss - 1, yboss);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 f87f 	bl	8001ed8 <vt100_move>
			serial_putchar(' ');
 8000dda:	2020      	movs	r0, #32
 8000ddc:	f000 fee8 	bl	8001bb0 <serial_putchar>
		}
		sleep_moi(8);
 8000de0:	2008      	movs	r0, #8
 8000de2:	f000 f8d3 	bl	8000f8c <sleep_moi>
	for (xboss = 2; xboss <= 40; xboss++)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3301      	adds	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b28      	cmp	r3, #40	; 0x28
 8000df0:	dde2      	ble.n	8000db8 <animation+0x4c>
	}
	sleep_moi(50);
 8000df2:	2032      	movs	r0, #50	; 0x32
 8000df4:	f000 f8ca 	bl	8000f8c <sleep_moi>
	vt100_move(41, 13);
 8000df8:	210d      	movs	r1, #13
 8000dfa:	2029      	movs	r0, #41	; 0x29
 8000dfc:	f001 f86c 	bl	8001ed8 <vt100_move>
	serial_putchar('\\');
 8000e00:	205c      	movs	r0, #92	; 0x5c
 8000e02:	f000 fed5 	bl	8001bb0 <serial_putchar>
	vt100_move(40, 14);
 8000e06:	210e      	movs	r1, #14
 8000e08:	2028      	movs	r0, #40	; 0x28
 8000e0a:	f001 f865 	bl	8001ed8 <vt100_move>
	serial_puts("c'est moi");
 8000e0e:	4827      	ldr	r0, [pc, #156]	; (8000eac <animation+0x140>)
 8000e10:	f000 fef8 	bl	8001c04 <serial_puts>
	sleep_moi(400);
 8000e14:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e18:	f000 f8b8 	bl	8000f8c <sleep_moi>
	vt100_clear_screen();
 8000e1c:	f001 f8d8 	bl	8001fd0 <vt100_clear_screen>
	bordures();
 8000e20:	f000 fcc9 	bl	80017b6 <bordures>
	do
	{
		vt100_move(xboss, yboss);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f852 	bl	8001ed8 <vt100_move>
		serial_puts("   ");
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <animation+0x144>)
 8000e36:	f000 fee5 	bl	8001c04 <serial_puts>
		yboss -= 1;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	603b      	str	r3, [r7, #0]
		xboss -= 3;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b03      	subs	r3, #3
 8000e44:	607b      	str	r3, [r7, #4]
		boss(xboss, yboss);
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 fe03 	bl	8001a54 <boss>
		sleep_moi(10);
 8000e4e:	200a      	movs	r0, #10
 8000e50:	f000 f89c 	bl	8000f8c <sleep_moi>
	} while (yboss != 4);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d1e4      	bne.n	8000e24 <animation+0xb8>
	for (; xboss >= 3; xboss--)
 8000e5a:	e016      	b.n	8000e8a <animation+0x11e>
	{
		vt100_move(xboss + 1, yboss);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	3301      	adds	r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f834 	bl	8001ed8 <vt100_move>
		serial_puts("   ");
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <animation+0x144>)
 8000e72:	f000 fec7 	bl	8001c04 <serial_puts>
		boss(xboss, yboss);
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 fdeb 	bl	8001a54 <boss>
		sleep_moi(5);
 8000e7e:	2005      	movs	r0, #5
 8000e80:	f000 f884 	bl	8000f8c <sleep_moi>
	for (; xboss >= 3; xboss--)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	dce5      	bgt.n	8000e5c <animation+0xf0>
	}
	sleep_moi(100);
 8000e90:	2064      	movs	r0, #100	; 0x64
 8000e92:	f000 f87b 	bl	8000f8c <sleep_moi>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08002074 	.word	0x08002074
 8000ea4:	08002080 	.word	0x08002080
 8000ea8:	0800208c 	.word	0x0800208c
 8000eac:	08002094 	.word	0x08002094
 8000eb0:	080020a0 	.word	0x080020a0

08000eb4 <combat_final>:

void combat_final()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	animation();
 8000eb8:	f7ff ff58 	bl	8000d6c <animation>
	while (tableau_ennemis[8].vie_enne != 0)
 8000ebc:	e04f      	b.n	8000f5e <combat_final+0xaa>
	{
		if (*ptr_vie_perso == 0)
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <combat_final+0xb8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <combat_final+0x20>
		{
			vt100_clear_screen();
 8000ec8:	f001 f882 	bl	8001fd0 <vt100_clear_screen>
			bordures();
 8000ecc:	f000 fc73 	bl	80017b6 <bordures>
			game_over();
 8000ed0:	f000 fd00 	bl	80018d4 <game_over>
		}
		depl_perso();
 8000ed4:	f000 fbcc 	bl	8001670 <depl_perso>
		compteur_vies(*ptr_vie_perso);
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <combat_final+0xb8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fdce 	bl	8001a80 <compteur_vies>
		if (carac == 'z' || (*ptr_y_mun != 22 && *ptr_tir_ennemi % 2 == 0))
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <combat_final+0xbc>)
 8000ee6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eea:	2b7a      	cmp	r3, #122	; 0x7a
 8000eec:	d00c      	beq.n	8000f08 <combat_final+0x54>
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <combat_final+0xc0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b16      	cmp	r3, #22
 8000ef6:	d009      	beq.n	8000f0c <combat_final+0x58>
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <combat_final+0xc4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <combat_final+0x58>
		{
			tir();
 8000f08:	f000 fb56 	bl	80015b8 <tir>
		}

		depl_1_enn(&tableau_ennemis[8]);
 8000f0c:	481b      	ldr	r0, [pc, #108]	; (8000f7c <combat_final+0xc8>)
 8000f0e:	f000 f857 	bl	8000fc0 <depl_1_enn>
		hit_ennemis(&tableau_ennemis[8]);
 8000f12:	481a      	ldr	r0, [pc, #104]	; (8000f7c <combat_final+0xc8>)
 8000f14:	f000 fa02 	bl	800131c <hit_ennemis>
		*ptr_tir_ennemi += 1;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <combat_final+0xc4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <combat_final+0xc4>)
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	3201      	adds	r2, #1
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
		if ((*ptr_tir_ennemi % 2 == 0 && p_ennemy->vie_enne != 0)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <combat_final+0xc4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d104      	bne.n	8000f42 <combat_final+0x8e>
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <combat_final+0xcc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	789b      	ldrb	r3, [r3, #2]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d107      	bne.n	8000f52 <combat_final+0x9e>
				|| *ptr_y_mun_enn != p_ennemy->y_enne)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <combat_final+0xd0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <combat_final+0xcc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d005      	beq.n	8000f5e <combat_final+0xaa>
		{
			tir_enn(&tableau_ennemis[8]);
 8000f52:	480a      	ldr	r0, [pc, #40]	; (8000f7c <combat_final+0xc8>)
 8000f54:	f000 f91c 	bl	8001190 <tir_enn>

			sleep_moi(VITESSE_JEU);
 8000f58:	2004      	movs	r0, #4
 8000f5a:	f000 f817 	bl	8000f8c <sleep_moi>
	while (tableau_ennemis[8].vie_enne != 0)
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <combat_final+0xd4>)
 8000f60:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1aa      	bne.n	8000ebe <combat_final+0xa>
		}

	}
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000078 	.word	0x20000078
 8000f70:	20000098 	.word	0x20000098
 8000f74:	20000084 	.word	0x20000084
 8000f78:	20000088 	.word	0x20000088
 8000f7c:	20000058 	.word	0x20000058
 8000f80:	2000014c 	.word	0x2000014c
 8000f84:	20000068 	.word	0x20000068
 8000f88:	20000030 	.word	0x20000030

08000f8c <sleep_moi>:

#include "vt100.h"
#include "depl_enn.h"

void sleep_moi(unsigned long int t)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	int i = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
	unsigned long int max = t * 100000;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <sleep_moi+0x30>)
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	60bb      	str	r3, [r7, #8]
	do
	{
		i++;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
	} while (i <= max);
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d9f8      	bls.n	8000fa2 <sleep_moi+0x16>
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	000186a0 	.word	0x000186a0

08000fc0 <depl_1_enn>:
{ X_4_ENNEMI, Y_2_ENNEMI, VIE_ENNEMIS, 7, TAILLE_ENNEMIS },
{ X_BOSS, Y_BOSS, VIES_BOSS, ID_BOSS, TAILLE_BOSS }, };


void depl_1_enn(donnees_ennemi *p_ennemy)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	//condition ennemi vivant
	if (p_ennemy->vie_enne != 0)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	789b      	ldrb	r3, [r3, #2]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80d0 	beq.w	8001172 <depl_1_enn+0x1b2>
	{

//game over si l'ennemi est en bas de l'ecran
		if (p_ennemy->y_enne == 22)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	785b      	ldrb	r3, [r3, #1]
 8000fd6:	2b16      	cmp	r3, #22
 8000fd8:	d101      	bne.n	8000fde <depl_1_enn+0x1e>
		{
			game_over();
 8000fda:	f000 fc7b 	bl	80018d4 <game_over>
		}

		//condition servant a connaitre le sens de mouvement de l'ennemi avec les bordures de l'ecran

		if (p_ennemy->x_enne + p_ennemy->taille == 79
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	2b4f      	cmp	r3, #79	; 0x4f
 8000fec:	d003      	beq.n	8000ff6 <depl_1_enn+0x36>
				|| p_ennemy->x_enne - 2 == 1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d105      	bne.n	8001002 <depl_1_enn+0x42>
		{
			compteur_sens += 1;
 8000ff6:	4b61      	ldr	r3, [pc, #388]	; (800117c <depl_1_enn+0x1bc>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b5f      	ldr	r3, [pc, #380]	; (800117c <depl_1_enn+0x1bc>)
 8001000:	701a      	strb	r2, [r3, #0]
		}
		sens = compteur_sens % 2;
 8001002:	4b5e      	ldr	r3, [pc, #376]	; (800117c <depl_1_enn+0x1bc>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <depl_1_enn+0x1c0>)
 800100e:	701a      	strb	r2, [r3, #0]

		//vers la droite
		if (sens == 0)
 8001010:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <depl_1_enn+0x1c0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d127      	bne.n	8001068 <depl_1_enn+0xa8>
		{
			vt100_move(p_ennemy->x_enne, p_ennemy->y_enne);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f000 ff58 	bl	8001ed8 <vt100_move>
			serial_puts(" ");
 8001028:	4856      	ldr	r0, [pc, #344]	; (8001184 <depl_1_enn+0x1c4>)
 800102a:	f000 fdeb 	bl	8001c04 <serial_puts>
			p_ennemy->x_enne += 1;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	701a      	strb	r2, [r3, #0]
			if (p_ennemy->ID != ID_BOSS)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	78db      	ldrb	r3, [r3, #3]
 800103e:	2b08      	cmp	r3, #8
 8001040:	d009      	beq.n	8001056 <depl_1_enn+0x96>
			{
				ennemi_base(p_ennemy->x_enne, p_ennemy->y_enne);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f000 fcd4 	bl	80019fc <ennemi_base>
 8001054:	e008      	b.n	8001068 <depl_1_enn+0xa8>
			}
			else
				boss(p_ennemy->x_enne, p_ennemy->y_enne);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	4619      	mov	r1, r3
 8001062:	4610      	mov	r0, r2
 8001064:	f000 fcf6 	bl	8001a54 <boss>
		}
		//vers la gauche
		if (sens == 1)
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <depl_1_enn+0x1c0>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d12d      	bne.n	80010cc <depl_1_enn+0x10c>
		{

			vt100_move(p_ennemy->x_enne + p_ennemy->taille - 1,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	781a      	ldrb	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	4413      	add	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	785b      	ldrb	r3, [r3, #1]
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f000 ff26 	bl	8001ed8 <vt100_move>
					p_ennemy->y_enne);
			serial_puts(" ");
 800108c:	483d      	ldr	r0, [pc, #244]	; (8001184 <depl_1_enn+0x1c4>)
 800108e:	f000 fdb9 	bl	8001c04 <serial_puts>
			p_ennemy->x_enne -= 1;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	3b01      	subs	r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	701a      	strb	r2, [r3, #0]
			if (p_ennemy->ID != ID_BOSS)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	78db      	ldrb	r3, [r3, #3]
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d009      	beq.n	80010ba <depl_1_enn+0xfa>
			{
				ennemi_base(p_ennemy->x_enne, p_ennemy->y_enne);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f000 fca2 	bl	80019fc <ennemi_base>
 80010b8:	e008      	b.n	80010cc <depl_1_enn+0x10c>
			}
			else
				boss(p_ennemy->x_enne, p_ennemy->y_enne);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4610      	mov	r0, r2
 80010c8:	f000 fcc4 	bl	8001a54 <boss>

		}

		// descendre d'une ligne
		if ((p_ennemy->x_enne == 72 && p_ennemy->ID != 8)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b48      	cmp	r3, #72	; 0x48
 80010d2:	d103      	bne.n	80010dc <depl_1_enn+0x11c>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	78db      	ldrb	r3, [r3, #3]
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d107      	bne.n	80010ec <depl_1_enn+0x12c>
				|| (p_ennemy->x_enne == 3 && p_ennemy->ID != 8))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d146      	bne.n	8001172 <depl_1_enn+0x1b2>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	78db      	ldrb	r3, [r3, #3]
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d042      	beq.n	8001172 <depl_1_enn+0x1b2>
		{

			if (sens == 0)
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <depl_1_enn+0x1c0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <depl_1_enn+0x13a>
			{
				compteur_sens = 1;
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <depl_1_enn+0x1bc>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
				 de sont voisin jusqu'a fusionner avec et causer des bugs vers la fin du jeu.
				 je ne comprends pas pourquoi x)  */

			}

			for (i = 0; i <= ID_CASE_MAX; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e029      	b.n	8001154 <depl_1_enn+0x194>
			{

				vt100_move(tableau_ennemis[i].x_enne,
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	4921      	ldr	r1, [pc, #132]	; (8001188 <depl_1_enn+0x1c8>)
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	440b      	add	r3, r1
 800110c:	7818      	ldrb	r0, [r3, #0]
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	491d      	ldr	r1, [pc, #116]	; (8001188 <depl_1_enn+0x1c8>)
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	440b      	add	r3, r1
 800111a:	3301      	adds	r3, #1
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	f000 feda 	bl	8001ed8 <vt100_move>
						tableau_ennemis[i].y_enne);
				serial_puts("      ");
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <depl_1_enn+0x1cc>)
 8001126:	f000 fd6d 	bl	8001c04 <serial_puts>
				tableau_ennemis[i].y_enne++;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	4916      	ldr	r1, [pc, #88]	; (8001188 <depl_1_enn+0x1c8>)
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	440b      	add	r3, r1
 8001136:	3301      	adds	r3, #1
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	b2d8      	uxtb	r0, r3
 800113e:	4912      	ldr	r1, [pc, #72]	; (8001188 <depl_1_enn+0x1c8>)
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	440b      	add	r3, r1
 8001148:	3301      	adds	r3, #1
 800114a:	4602      	mov	r2, r0
 800114c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i <= ID_CASE_MAX; i++)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	3301      	adds	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b07      	cmp	r3, #7
 8001158:	d9d2      	bls.n	8001100 <depl_1_enn+0x140>
			}
			ennemi_base(p_ennemy->x_enne, p_ennemy->y_enne);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	4619      	mov	r1, r3
 8001166:	4610      	mov	r0, r2
 8001168:	f000 fc48 	bl	80019fc <ennemi_base>

			sleep_moi(VITESSE_ENNEMI_TPS);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff0d 	bl	8000f8c <sleep_moi>

		}
	}

}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000c5 	.word	0x200000c5
 8001180:	200000c4 	.word	0x200000c4
 8001184:	080020a4 	.word	0x080020a4
 8001188:	20000030 	.word	0x20000030
 800118c:	080020a8 	.word	0x080020a8

08001190 <tir_enn>:

void tir_enn(donnees_ennemi *p_ennemy)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	//condition pour que le missile ne suive pas l'ennemi une fois lancé
	if (*ptr_compteur_tir == 0)
 8001198:	4b58      	ldr	r3, [pc, #352]	; (80012fc <tir_enn+0x16c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10f      	bne.n	80011c2 <tir_enn+0x32>
	{
		*ptr_y_mun_enn = p_ennemy->y_enne;
 80011a2:	4b57      	ldr	r3, [pc, #348]	; (8001300 <tir_enn+0x170>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	7852      	ldrb	r2, [r2, #1]
 80011aa:	701a      	strb	r2, [r3, #0]
		*ptr_x_mun_enn = p_ennemy->x_enne + (p_ennemy->taille / 2);
 80011ac:	4b55      	ldr	r3, [pc, #340]	; (8001304 <tir_enn+0x174>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	7811      	ldrb	r1, [r2, #0]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	7912      	ldrb	r2, [r2, #4]
 80011b8:	0852      	lsrs	r2, r2, #1
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440a      	add	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
	}

	//actions pour faire descendre le missile
	vt100_move(*ptr_x_mun_enn, *ptr_y_mun_enn);
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <tir_enn+0x174>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <tir_enn+0x170>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f000 fe81 	bl	8001ed8 <vt100_move>
	serial_puts(" ");
 80011d6:	484c      	ldr	r0, [pc, #304]	; (8001308 <tir_enn+0x178>)
 80011d8:	f000 fd14 	bl	8001c04 <serial_puts>
	*ptr_y_mun_enn += 1;
 80011dc:	4b48      	ldr	r3, [pc, #288]	; (8001300 <tir_enn+0x170>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a47      	ldr	r2, [pc, #284]	; (8001300 <tir_enn+0x170>)
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	3201      	adds	r2, #1
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	701a      	strb	r2, [r3, #0]
	vt100_move(*ptr_x_mun_enn, *ptr_y_mun_enn);
 80011ec:	4b45      	ldr	r3, [pc, #276]	; (8001304 <tir_enn+0x174>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	4b43      	ldr	r3, [pc, #268]	; (8001300 <tir_enn+0x170>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f000 fe6c 	bl	8001ed8 <vt100_move>
	serial_puts(":");
 8001200:	4842      	ldr	r0, [pc, #264]	; (800130c <tir_enn+0x17c>)
 8001202:	f000 fcff 	bl	8001c04 <serial_puts>
	*ptr_compteur_tir = 1;
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <tir_enn+0x16c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]

	//effacer le missile une fois qu'il a dépassé le perso
	if (*ptr_y_mun_enn == 23)
 800120e:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <tir_enn+0x170>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b17      	cmp	r3, #23
 8001216:	d124      	bne.n	8001262 <tir_enn+0xd2>
	{
		vt100_move(*ptr_x_mun_enn, *ptr_y_mun_enn - 1);
 8001218:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <tir_enn+0x174>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <tir_enn+0x170>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f000 fe54 	bl	8001ed8 <vt100_move>
		serial_puts(" ");
 8001230:	4835      	ldr	r0, [pc, #212]	; (8001308 <tir_enn+0x178>)
 8001232:	f000 fce7 	bl	8001c04 <serial_puts>
		vt100_move(*ptr_x_mun_enn, *ptr_y_mun_enn);
 8001236:	4b33      	ldr	r3, [pc, #204]	; (8001304 <tir_enn+0x174>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	781a      	ldrb	r2, [r3, #0]
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <tir_enn+0x170>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	4610      	mov	r0, r2
 8001246:	f000 fe47 	bl	8001ed8 <vt100_move>
		serial_puts(" ");
 800124a:	482f      	ldr	r0, [pc, #188]	; (8001308 <tir_enn+0x178>)
 800124c:	f000 fcda 	bl	8001c04 <serial_puts>

		*ptr_compteur_tir = 0;
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <tir_enn+0x16c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
		*ptr_y_mun_enn = p_ennemy->y_enne;
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <tir_enn+0x170>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	7852      	ldrb	r2, [r2, #1]
 8001260:	701a      	strb	r2, [r3, #0]

	}
	// condition d'annimation si hit + implémentation de la hitbox
	if (*ptr_vie_perso != 0&& *ptr_y_mun_enn == INIT_PERSO_Y
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <tir_enn+0x180>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d043      	beq.n	80012f4 <tir_enn+0x164>
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <tir_enn+0x170>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b16      	cmp	r3, #22
 8001274:	d13e      	bne.n	80012f4 <tir_enn+0x164>
	&& *ptr_x_mun_enn >= *ptr_x_perso
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <tir_enn+0x174>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <tir_enn+0x184>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	db35      	blt.n	80012f4 <tir_enn+0x164>
	&& *ptr_x_mun_enn <= *ptr_x_perso + TAILLE_PERSO)
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <tir_enn+0x174>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <tir_enn+0x184>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3306      	adds	r3, #6
 8001298:	429a      	cmp	r2, r3
 800129a:	dc2b      	bgt.n	80012f4 <tir_enn+0x164>
	{
		vt100_move(*ptr_x_mun_enn, *ptr_y_mun_enn + 1);
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <tir_enn+0x174>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <tir_enn+0x170>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4619      	mov	r1, r3
 80012ae:	4610      	mov	r0, r2
 80012b0:	f000 fe12 	bl	8001ed8 <vt100_move>
		serial_puts(" ");
 80012b4:	4814      	ldr	r0, [pc, #80]	; (8001308 <tir_enn+0x178>)
 80012b6:	f000 fca5 	bl	8001c04 <serial_puts>
		//sleep_moi(tps);
		vt100_move(*ptr_x_perso, INIT_PERSO_Y);
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <tir_enn+0x184>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2116      	movs	r1, #22
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fe07 	bl	8001ed8 <vt100_move>
		serial_puts("#@~@#");
 80012ca:	4813      	ldr	r0, [pc, #76]	; (8001318 <tir_enn+0x188>)
 80012cc:	f000 fc9a 	bl	8001c04 <serial_puts>
		*ptr_vie_perso -= 1;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <tir_enn+0x180>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <tir_enn+0x180>)
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	3a01      	subs	r2, #1
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	701a      	strb	r2, [r3, #0]

		sleep_moi(20);
 80012e0:	2014      	movs	r0, #20
 80012e2:	f7ff fe53 	bl	8000f8c <sleep_moi>
		perso(*ptr_x_perso, INIT_PERSO_Y);
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <tir_enn+0x184>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2116      	movs	r1, #22
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fb9a 	bl	8001a28 <perso>
	}
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000006c 	.word	0x2000006c
 8001300:	20000068 	.word	0x20000068
 8001304:	20000064 	.word	0x20000064
 8001308:	080020a4 	.word	0x080020a4
 800130c:	080020b0 	.word	0x080020b0
 8001310:	20000078 	.word	0x20000078
 8001314:	2000008c 	.word	0x2000008c
 8001318:	080020b4 	.word	0x080020b4

0800131c <hit_ennemis>:

void hit_ennemis(donnees_ennemi *p_ennemy)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	// condition d'annimation si hit
	if (p_ennemy->vie_enne != 0 && *ptr_y_mun == p_ennemy->y_enne
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d057      	beq.n	80013dc <hit_ennemis+0xc0>
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <hit_ennemis+0xc8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	7852      	ldrb	r2, [r2, #1]
 8001336:	4293      	cmp	r3, r2
 8001338:	d150      	bne.n	80013dc <hit_ennemis+0xc0>
			&& *ptr_x_missile >= p_ennemy->x_enne
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <hit_ennemis+0xcc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	7812      	ldrb	r2, [r2, #0]
 8001344:	4293      	cmp	r3, r2
 8001346:	db49      	blt.n	80013dc <hit_ennemis+0xc0>
			&& *ptr_x_missile <= p_ennemy->x_enne + p_ennemy->taille)
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <hit_ennemis+0xcc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	440b      	add	r3, r1
 800135a:	429a      	cmp	r2, r3
 800135c:	dc3e      	bgt.n	80013dc <hit_ennemis+0xc0>

	{
		vt100_move(*ptr_x_missile, *ptr_y_mun + 1);
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <hit_ennemis+0xcc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <hit_ennemis+0xc8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f000 fdaf 	bl	8001ed8 <vt100_move>
		serial_puts(" ");
 800137a:	481c      	ldr	r0, [pc, #112]	; (80013ec <hit_ennemis+0xd0>)
 800137c:	f000 fc42 	bl	8001c04 <serial_puts>
		sleep_moi(tps);
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <hit_ennemis+0xd4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe01 	bl	8000f8c <sleep_moi>
		vt100_move(p_ennemy->x_enne, p_ennemy->y_enne);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	785b      	ldrb	r3, [r3, #1]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f000 fd9f 	bl	8001ed8 <vt100_move>
		serial_puts("&#$#&");
 800139a:	4816      	ldr	r0, [pc, #88]	; (80013f4 <hit_ennemis+0xd8>)
 800139c:	f000 fc32 	bl	8001c04 <serial_puts>
		p_ennemy->vie_enne -= 1;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	789b      	ldrb	r3, [r3, #2]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	709a      	strb	r2, [r3, #2]
		//le faire disparaitre
		sleep_moi(20);
 80013ac:	2014      	movs	r0, #20
 80013ae:	f7ff fded 	bl	8000f8c <sleep_moi>
		vt100_move(p_ennemy->x_enne, p_ennemy->y_enne);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f000 fd8b 	bl	8001ed8 <vt100_move>
		serial_puts("       ");
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <hit_ennemis+0xdc>)
 80013c4:	f000 fc1e 	bl	8001c04 <serial_puts>
		*ptr_y_mun = 3;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <hit_ennemis+0xc8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2203      	movs	r2, #3
 80013ce:	601a      	str	r2, [r3, #0]
		compteur_vies_ennemis -= 1;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <hit_ennemis+0xe0>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <hit_ennemis+0xe0>)
 80013da:	701a      	strb	r2, [r3, #0]

	}
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000084 	.word	0x20000084
 80013e8:	20000080 	.word	0x20000080
 80013ec:	080020a4 	.word	0x080020a4
 80013f0:	20000074 	.word	0x20000074
 80013f4:	080020bc 	.word	0x080020bc
 80013f8:	080020c4 	.word	0x080020c4
 80013fc:	20000070 	.word	0x20000070

08001400 <random_tir>:

void random_tir(donnees_ennemi *p_ennemy)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	if (*ptr_y_mun_enn == p_ennemy->y_enne) //opération determinant un
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <random_tir+0xac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	429a      	cmp	r2, r3
 8001414:	d10e      	bne.n	8001434 <random_tir+0x34>
											//nombre aléatoire
	{
		*ptr_lun_apres_lautre = *ptr_tir_ennemi_switch
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <random_tir+0xb0>)
 8001418:	6819      	ldr	r1, [r3, #0]
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <random_tir+0xb4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	781b      	ldrb	r3, [r3, #0]
				% (*ptr_vies_ennemis / VIE_ENNEMIS);
 8001420:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <random_tir+0xb8>)
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	7812      	ldrb	r2, [r2, #0]
		*ptr_lun_apres_lautre = *ptr_tir_ennemi_switch
 8001426:	fbb3 f0f2 	udiv	r0, r3, r2
 800142a:	fb02 f200 	mul.w	r2, r2, r0
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	b2db      	uxtb	r3, r3
 8001432:	700b      	strb	r3, [r1, #0]
	}
	//condition de tir
	if ((p_ennemy->vie_enne != 0 && *ptr_y_mun_enn == p_ennemy->y_enne)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <random_tir+0x4a>
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <random_tir+0xac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	429a      	cmp	r2, r3
 8001448:	d006      	beq.n	8001458 <random_tir+0x58>
			|| *ptr_y_mun_enn != p_ennemy->y_enne)
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <random_tir+0xac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	785b      	ldrb	r3, [r3, #1]
 8001454:	429a      	cmp	r2, r3
 8001456:	d00f      	beq.n	8001478 <random_tir+0x78>

	{
		tir_enn(&tableau_ennemis[*ptr_lun_apres_lautre]);
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <random_tir+0xb0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <random_tir+0xbc>)
 8001468:	4413      	add	r3, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe90 	bl	8001190 <tir_enn>
		sleep_moi(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff fd8b 	bl	8000f8c <sleep_moi>
	{
		vt100_move(*ptr_x_mun_enn, *ptr_y_mun_enn);
		serial_puts(" ");
		*ptr_y_mun_enn = 23;
	}
}
 8001476:	e014      	b.n	80014a2 <random_tir+0xa2>
	else if (p_ennemy->vie_enne == 0)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	789b      	ldrb	r3, [r3, #2]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d110      	bne.n	80014a2 <random_tir+0xa2>
		vt100_move(*ptr_x_mun_enn, *ptr_y_mun_enn);
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <random_tir+0xc0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <random_tir+0xac>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	4610      	mov	r0, r2
 8001490:	f000 fd22 	bl	8001ed8 <vt100_move>
		serial_puts(" ");
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <random_tir+0xc4>)
 8001496:	f000 fbb5 	bl	8001c04 <serial_puts>
		*ptr_y_mun_enn = 23;
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <random_tir+0xac>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2217      	movs	r2, #23
 80014a0:	701a      	strb	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000068 	.word	0x20000068
 80014b0:	20000090 	.word	0x20000090
 80014b4:	20000094 	.word	0x20000094
 80014b8:	20000060 	.word	0x20000060
 80014bc:	20000030 	.word	0x20000030
 80014c0:	20000064 	.word	0x20000064
 80014c4:	080020a4 	.word	0x080020a4

080014c8 <jeu>:
extern signed char carac;
static u8 vie_perso = VIES_PERSO;
u8 *ptr_vie_perso = &vie_perso;

void jeu()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	//u8 a;
	uint8_t i;
	//boucle infinie faisant tourner le jeu
	while (1)
	{
		*ptr_tir_ennemi_switch += 1;
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <jeu+0xd0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a31      	ldr	r2, [pc, #196]	; (8001598 <jeu+0xd0>)
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	3201      	adds	r2, #1
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]

		//fonction déplacement joueur
		depl_perso();
 80014de:	f000 f8c7 	bl	8001670 <depl_perso>

		//determine le nombre de vies restantes du joueur
		compteur_vies(vie_perso);
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <jeu+0xd4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 faca 	bl	8001a80 <compteur_vies>

		//fonction déplacement ennemi
		for (i = 0; i <= ID_CASE_MAX; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	e014      	b.n	800151c <jeu+0x54>
		{
			depl_1_enn(&tableau_ennemis[i]);
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <jeu+0xd8>)
 80014fc:	4413      	add	r3, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd5e 	bl	8000fc0 <depl_1_enn>
			hit_ennemis(&tableau_ennemis[i]);
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	4a24      	ldr	r2, [pc, #144]	; (80015a0 <jeu+0xd8>)
 800150e:	4413      	add	r3, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff03 	bl	800131c <hit_ennemis>
		for (i = 0; i <= ID_CASE_MAX; i++)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	3301      	adds	r3, #1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b07      	cmp	r3, #7
 8001520:	d9e7      	bls.n	80014f2 <jeu+0x2a>

		}
		random_tir(&tableau_ennemis[*ptr_lun_apres_lautre]);
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <jeu+0xdc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <jeu+0xd8>)
 8001532:	4413      	add	r3, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff63 	bl	8001400 <random_tir>



		//condition pour pouvoir tirer et faire continer la course du missile
		if (carac == 'z' || *ptr_y_mun != 22)
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <jeu+0xe0>)
 800153c:	f993 3000 	ldrsb.w	r3, [r3]
 8001540:	2b7a      	cmp	r3, #122	; 0x7a
 8001542:	d004      	beq.n	800154e <jeu+0x86>
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <jeu+0xe4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b16      	cmp	r3, #22
 800154c:	d001      	beq.n	8001552 <jeu+0x8a>
		{

			tir();
 800154e:	f000 f833 	bl	80015b8 <tir>

		}

		//animation combat final après avoir tué tout les ennemis
		if (*ptr_vies_ennemis == 0)
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <jeu+0xe8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00e      	beq.n	800157a <jeu+0xb2>
		{
			break;
		}

		//animation game over
		if (*ptr_vie_perso == 0)
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <jeu+0xec>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d105      	bne.n	8001572 <jeu+0xaa>
		{
			vt100_clear_screen();
 8001566:	f000 fd33 	bl	8001fd0 <vt100_clear_screen>
			bordures();
 800156a:	f000 f924 	bl	80017b6 <bordures>
			game_over();
 800156e:	f000 f9b1 	bl	80018d4 <game_over>
		}
		//limiter l'accélération du jeu lorsqu'il reste peu d'ennemis
		sleep_moi(VITESSE_JEU);
 8001572:	2004      	movs	r0, #4
 8001574:	f7ff fd0a 	bl	8000f8c <sleep_moi>
		*ptr_tir_ennemi_switch += 1;
 8001578:	e7a9      	b.n	80014ce <jeu+0x6>
			break;
 800157a:	bf00      	nop
	}
	vt100_clear_screen();
 800157c:	f000 fd28 	bl	8001fd0 <vt100_clear_screen>
	bordures();
 8001580:	f000 f919 	bl	80017b6 <bordures>
	combat_final();
 8001584:	f7ff fc96 	bl	8000eb4 <combat_final>
	vt100_clear_screen();
 8001588:	f000 fd22 	bl	8001fd0 <vt100_clear_screen>
	bordures();
 800158c:	f000 f913 	bl	80017b6 <bordures>
	while (1)
	{
		ecran_fin();
 8001590:	f000 f94a 	bl	8001828 <ecran_fin>
 8001594:	e7fc      	b.n	8001590 <jeu+0xc8>
 8001596:	bf00      	nop
 8001598:	20000094 	.word	0x20000094
 800159c:	2000007c 	.word	0x2000007c
 80015a0:	20000030 	.word	0x20000030
 80015a4:	20000090 	.word	0x20000090
 80015a8:	20000098 	.word	0x20000098
 80015ac:	20000084 	.word	0x20000084
 80015b0:	20000060 	.word	0x20000060
 80015b4:	20000078 	.word	0x20000078

080015b8 <tir>:
extern int x_missile;
extern int x_perso;
extern int y_perso;

void tir()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	//condition pour que le missile ne suive pas le perso une fois lancé
	if (*ptr_y_mun == 22)
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <tir+0xa4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b16      	cmp	r3, #22
 80015c4:	d106      	bne.n	80015d4 <tir+0x1c>
	{
		*ptr_x_missile = *ptr_x_perso + 2;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <tir+0xa8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a26      	ldr	r2, [pc, #152]	; (8001664 <tir+0xac>)
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	3202      	adds	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
	}

	//actions pour faire descendre le missile
	vt100_move(*ptr_x_missile, *ptr_y_mun);
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <tir+0xa8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <tir+0xa4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f000 fc76 	bl	8001ed8 <vt100_move>
	serial_puts("|");
 80015ec:	481e      	ldr	r0, [pc, #120]	; (8001668 <tir+0xb0>)
 80015ee:	f000 fb09 	bl	8001c04 <serial_puts>
	vt100_move(*ptr_x_missile, *ptr_y_mun + 1);
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <tir+0xa8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <tir+0xa4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	3301      	adds	r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	4610      	mov	r0, r2
 800160a:	f000 fc65 	bl	8001ed8 <vt100_move>
	serial_puts(" ");
 800160e:	4817      	ldr	r0, [pc, #92]	; (800166c <tir+0xb4>)
 8001610:	f000 faf8 	bl	8001c04 <serial_puts>
	;
	*ptr_y_mun -= 1;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <tir+0xa4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a10      	ldr	r2, [pc, #64]	; (800165c <tir+0xa4>)
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	3a01      	subs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]

	//effacer le missile une fois qu'il a dépassé les ennemis
	if (*ptr_y_mun == 2)
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <tir+0xa4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d114      	bne.n	8001656 <tir+0x9e>
	{
		vt100_move(*ptr_x_missile, *ptr_y_mun + 1);
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <tir+0xa8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <tir+0xa4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	3301      	adds	r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f000 fc48 	bl	8001ed8 <vt100_move>
		serial_puts(" ");
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <tir+0xb4>)
 800164a:	f000 fadb 	bl	8001c04 <serial_puts>

		//reinitialisation du missile
		*ptr_y_mun = 22;
 800164e:	4b03      	ldr	r3, [pc, #12]	; (800165c <tir+0xa4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2216      	movs	r2, #22
 8001654:	601a      	str	r2, [r3, #0]

	}
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000084 	.word	0x20000084
 8001660:	20000080 	.word	0x20000080
 8001664:	2000008c 	.word	0x2000008c
 8001668:	080020cc 	.word	0x080020cc
 800166c:	080020d0 	.word	0x080020d0

08001670 <depl_perso>:

void depl_perso(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

	carac = serial_get_last_char();
 8001674:	f000 fadc 	bl	8001c30 <serial_get_last_char>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <depl_perso+0xc0>)
 800167e:	601a      	str	r2, [r3, #0]
	//aller vers la droite
	if (carac == 'd')
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <depl_perso+0xc0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b64      	cmp	r3, #100	; 0x64
 8001686:	d126      	bne.n	80016d6 <depl_perso+0x66>
	{
		vt100_move(*ptr_x_perso, y_perso);
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <depl_perso+0xc4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <depl_perso+0xc8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4619      	mov	r1, r3
 8001698:	4610      	mov	r0, r2
 800169a:	f000 fc1d 	bl	8001ed8 <vt100_move>
		serial_puts("     ");
 800169e:	4827      	ldr	r0, [pc, #156]	; (800173c <depl_perso+0xcc>)
 80016a0:	f000 fab0 	bl	8001c04 <serial_puts>
		*ptr_x_perso += 1;
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <depl_perso+0xc4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a22      	ldr	r2, [pc, #136]	; (8001734 <depl_perso+0xc4>)
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	3201      	adds	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
		//empecher le perso de sortir de l'ecran
		if (*ptr_x_perso > LIMITE_DROITE_ECRAN)
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <depl_perso+0xc4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b4a      	cmp	r3, #74	; 0x4a
 80016ba:	dd03      	ble.n	80016c4 <depl_perso+0x54>
		{
			*ptr_x_perso = LIMITE_DROITE_ECRAN;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <depl_perso+0xc4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	224a      	movs	r2, #74	; 0x4a
 80016c2:	601a      	str	r2, [r3, #0]

		}
		perso(*ptr_x_perso, y_perso);
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <depl_perso+0xc4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <depl_perso+0xc8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f000 f9a9 	bl	8001a28 <perso>
	}
//aller vers la gauche
	if (carac == 'q')
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <depl_perso+0xc0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b71      	cmp	r3, #113	; 0x71
 80016dc:	d126      	bne.n	800172c <depl_perso+0xbc>
	{
		vt100_move(*ptr_x_perso, y_perso);
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <depl_perso+0xc4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <depl_perso+0xc8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f000 fbf2 	bl	8001ed8 <vt100_move>
		serial_puts("     ");
 80016f4:	4811      	ldr	r0, [pc, #68]	; (800173c <depl_perso+0xcc>)
 80016f6:	f000 fa85 	bl	8001c04 <serial_puts>
		*ptr_x_perso -= 1;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <depl_perso+0xc4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <depl_perso+0xc4>)
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	3a01      	subs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]

		//empecher le perso de sortir de l'ecran

		if (*ptr_x_perso < LIMITE_GAUCHE_ECRAN)
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <depl_perso+0xc4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	dc03      	bgt.n	800171a <depl_perso+0xaa>
		{
			*ptr_x_perso = LIMITE_GAUCHE_ECRAN;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <depl_perso+0xc4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2202      	movs	r2, #2
 8001718:	601a      	str	r2, [r3, #0]

		}
		perso(*ptr_x_perso, y_perso);
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <depl_perso+0xc4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <depl_perso+0xc8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f000 f97e 	bl	8001a28 <perso>

	}

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000098 	.word	0x20000098
 8001734:	2000008c 	.word	0x2000008c
 8001738:	080022a0 	.word	0x080022a0
 800173c:	080020d4 	.word	0x080020d4

08001740 <main>:
 **
 **===========================================================================
 */
int main(void)
//VOIR DANS DPL_ENN LE CHANGEMENT DE Y
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
	int i = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
	 *  E.g.  SCB->VTOR = 0x20000000;
	 */

	/* TODO - Add your application code here */

	serial_init(BAUDRATE);
 800174a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800174e:	f000 f9d3 	bl	8001af8 <serial_init>
	//init_enns();
	menu();
 8001752:	f000 f8db 	bl	800190c <menu>

	/* Initialize LEDs */
	STM_EVAL_LEDInit(LED3);
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff fa14 	bl	8000b84 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fa11 	bl	8000b84 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 8001762:	2002      	movs	r0, #2
 8001764:	f7ff fa0e 	bl	8000b84 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8001768:	2003      	movs	r0, #3
 800176a:	f7ff fa0b 	bl	8000b84 <STM_EVAL_LEDInit>

	/* Turn on LEDs */
	STM_EVAL_LEDOn(LED3);
 800176e:	2001      	movs	r0, #1
 8001770:	f7ff fa36 	bl	8000be0 <STM_EVAL_LEDOn>
	STM_EVAL_LEDOn(LED4);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fa33 	bl	8000be0 <STM_EVAL_LEDOn>
	STM_EVAL_LEDOn(LED5);
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff fa30 	bl	8000be0 <STM_EVAL_LEDOn>
	STM_EVAL_LEDOn(LED6);
 8001780:	2003      	movs	r0, #3
 8001782:	f7ff fa2d 	bl	8000be0 <STM_EVAL_LEDOn>

	/* Infinite loop */
	while (1)
	{
		i++;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	e7fb      	b.n	8001786 <main+0x46>

0800178e <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8001798:	bf00      	nop
}
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 80017a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <bordures>:
u8 *ptr_tir_ennemi = &tir_ennemi;

donnees_ennemi *p_ennemy;

void bordures()
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
	u8 x;
	u8 y;
	//bordures horizontales
	for (x = 1; x < 81; x++)
 80017bc:	2301      	movs	r3, #1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	e012      	b.n	80017e8 <bordures+0x32>
	{
		vt100_move(x, 1);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2101      	movs	r1, #1
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fb86 	bl	8001ed8 <vt100_move>
		serial_putchar(35);
 80017cc:	2023      	movs	r0, #35	; 0x23
 80017ce:	f000 f9ef 	bl	8001bb0 <serial_putchar>
		vt100_move(x, 24);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2118      	movs	r1, #24
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fb7e 	bl	8001ed8 <vt100_move>
		serial_putchar(35);
 80017dc:	2023      	movs	r0, #35	; 0x23
 80017de:	f000 f9e7 	bl	8001bb0 <serial_putchar>
	for (x = 1; x < 81; x++)
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	3301      	adds	r3, #1
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	2b50      	cmp	r3, #80	; 0x50
 80017ec:	d9e9      	bls.n	80017c2 <bordures+0xc>
	}

	//bordures verticales
	for (y = 1; y < 81; y++)
 80017ee:	2301      	movs	r3, #1
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	e012      	b.n	800181a <bordures+0x64>
	{
		vt100_move(1, y);
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	4619      	mov	r1, r3
 80017f8:	2001      	movs	r0, #1
 80017fa:	f000 fb6d 	bl	8001ed8 <vt100_move>
		serial_putchar(35);
 80017fe:	2023      	movs	r0, #35	; 0x23
 8001800:	f000 f9d6 	bl	8001bb0 <serial_putchar>
		vt100_move(80, y);
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	4619      	mov	r1, r3
 8001808:	2050      	movs	r0, #80	; 0x50
 800180a:	f000 fb65 	bl	8001ed8 <vt100_move>
		serial_putchar(35);
 800180e:	2023      	movs	r0, #35	; 0x23
 8001810:	f000 f9ce 	bl	8001bb0 <serial_putchar>
	for (y = 1; y < 81; y++)
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	3301      	adds	r3, #1
 8001818:	71bb      	strb	r3, [r7, #6]
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	2b50      	cmp	r3, #80	; 0x50
 800181e:	d9e9      	bls.n	80017f4 <bordures+0x3e>
	}
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <ecran_fin>:

void ecran_fin()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	vt100_move(35, 8);
 800182c:	2108      	movs	r1, #8
 800182e:	2023      	movs	r0, #35	; 0x23
 8001830:	f000 fb52 	bl	8001ed8 <vt100_move>
	serial_puts("OUUAAAAAAH");
 8001834:	4820      	ldr	r0, [pc, #128]	; (80018b8 <ecran_fin+0x90>)
 8001836:	f000 f9e5 	bl	8001c04 <serial_puts>
	sleep_moi(50);
 800183a:	2032      	movs	r0, #50	; 0x32
 800183c:	f7ff fba6 	bl	8000f8c <sleep_moi>
	vt100_move(35, 8);
 8001840:	2108      	movs	r1, #8
 8001842:	2023      	movs	r0, #35	; 0x23
 8001844:	f000 fb48 	bl	8001ed8 <vt100_move>
	serial_puts("          ");
 8001848:	481c      	ldr	r0, [pc, #112]	; (80018bc <ecran_fin+0x94>)
 800184a:	f000 f9db 	bl	8001c04 <serial_puts>
	vt100_move(38, 10);
 800184e:	210a      	movs	r1, #10
 8001850:	2026      	movs	r0, #38	; 0x26
 8001852:	f000 fb41 	bl	8001ed8 <vt100_move>
	serial_puts("T'ES");
 8001856:	481a      	ldr	r0, [pc, #104]	; (80018c0 <ecran_fin+0x98>)
 8001858:	f000 f9d4 	bl	8001c04 <serial_puts>
	sleep_moi(30);
 800185c:	201e      	movs	r0, #30
 800185e:	f7ff fb95 	bl	8000f8c <sleep_moi>
	vt100_move(38, 10);
 8001862:	210a      	movs	r1, #10
 8001864:	2026      	movs	r0, #38	; 0x26
 8001866:	f000 fb37 	bl	8001ed8 <vt100_move>
	serial_puts("    ");
 800186a:	4816      	ldr	r0, [pc, #88]	; (80018c4 <ecran_fin+0x9c>)
 800186c:	f000 f9ca 	bl	8001c04 <serial_puts>
	vt100_move(38, 12);
 8001870:	210c      	movs	r1, #12
 8001872:	2026      	movs	r0, #38	; 0x26
 8001874:	f000 fb30 	bl	8001ed8 <vt100_move>
	serial_puts("TROP");
 8001878:	4813      	ldr	r0, [pc, #76]	; (80018c8 <ecran_fin+0xa0>)
 800187a:	f000 f9c3 	bl	8001c04 <serial_puts>
	sleep_moi(60);
 800187e:	203c      	movs	r0, #60	; 0x3c
 8001880:	f7ff fb84 	bl	8000f8c <sleep_moi>
	vt100_move(38, 12);
 8001884:	210c      	movs	r1, #12
 8001886:	2026      	movs	r0, #38	; 0x26
 8001888:	f000 fb26 	bl	8001ed8 <vt100_move>
	serial_puts("    ");
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <ecran_fin+0x9c>)
 800188e:	f000 f9b9 	bl	8001c04 <serial_puts>
	vt100_move(37, 14);
 8001892:	210e      	movs	r1, #14
 8001894:	2025      	movs	r0, #37	; 0x25
 8001896:	f000 fb1f 	bl	8001ed8 <vt100_move>
	serial_puts("FOOORT");
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <ecran_fin+0xa4>)
 800189c:	f000 f9b2 	bl	8001c04 <serial_puts>
	sleep_moi(90);
 80018a0:	205a      	movs	r0, #90	; 0x5a
 80018a2:	f7ff fb73 	bl	8000f8c <sleep_moi>
	vt100_move(37, 14);
 80018a6:	210e      	movs	r1, #14
 80018a8:	2025      	movs	r0, #37	; 0x25
 80018aa:	f000 fb15 	bl	8001ed8 <vt100_move>
	serial_puts("      ");
 80018ae:	4808      	ldr	r0, [pc, #32]	; (80018d0 <ecran_fin+0xa8>)
 80018b0:	f000 f9a8 	bl	8001c04 <serial_puts>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	080020dc 	.word	0x080020dc
 80018bc:	080020e8 	.word	0x080020e8
 80018c0:	080020f4 	.word	0x080020f4
 80018c4:	080020fc 	.word	0x080020fc
 80018c8:	08002104 	.word	0x08002104
 80018cc:	0800210c 	.word	0x0800210c
 80018d0:	08002114 	.word	0x08002114

080018d4 <game_over>:

void game_over()
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	vt100_move(35, 8);
 80018d8:	2108      	movs	r1, #8
 80018da:	2023      	movs	r0, #35	; 0x23
 80018dc:	f000 fafc 	bl	8001ed8 <vt100_move>
	serial_puts("GAME OVER");
 80018e0:	4808      	ldr	r0, [pc, #32]	; (8001904 <game_over+0x30>)
 80018e2:	f000 f98f 	bl	8001c04 <serial_puts>
	sleep_moi(50);
 80018e6:	2032      	movs	r0, #50	; 0x32
 80018e8:	f7ff fb50 	bl	8000f8c <sleep_moi>
	vt100_move(35, 8);
 80018ec:	2108      	movs	r1, #8
 80018ee:	2023      	movs	r0, #35	; 0x23
 80018f0:	f000 faf2 	bl	8001ed8 <vt100_move>
	serial_puts("         ");
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <game_over+0x34>)
 80018f6:	f000 f985 	bl	8001c04 <serial_puts>
	sleep_moi(50);
 80018fa:	2032      	movs	r0, #50	; 0x32
 80018fc:	f7ff fb46 	bl	8000f8c <sleep_moi>
//	serial_puts("PERSONNE NE T'AIME");
//	sleep_moi(100);
//	vt100_move(31, 12);
//	serial_puts("                  ");
//	sleep_moi(100);
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	0800211c 	.word	0x0800211c
 8001908:	08002128 	.word	0x08002128

0800190c <menu>:

void menu()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0

	//menu
	vt100_clear_screen();
 8001910:	f000 fb5e 	bl	8001fd0 <vt100_clear_screen>
	bordures();
 8001914:	f7ff ff4f 	bl	80017b6 <bordures>
	vt100_move(18, 3);
 8001918:	2103      	movs	r1, #3
 800191a:	2012      	movs	r0, #18
 800191c:	f000 fadc 	bl	8001ed8 <vt100_move>
	serial_puts("une escouade d'aliens veulent envahir la terre ");
 8001920:	482c      	ldr	r0, [pc, #176]	; (80019d4 <menu+0xc8>)
 8001922:	f000 f96f 	bl	8001c04 <serial_puts>
	vt100_move(20, 4);
 8001926:	2104      	movs	r1, #4
 8001928:	2014      	movs	r0, #20
 800192a:	f000 fad5 	bl	8001ed8 <vt100_move>
	serial_puts("tu as été choisi pour déjouer leurs plans");
 800192e:	482a      	ldr	r0, [pc, #168]	; (80019d8 <menu+0xcc>)
 8001930:	f000 f968 	bl	8001c04 <serial_puts>
	vt100_move(27, 5);
 8001934:	2105      	movs	r1, #5
 8001936:	201b      	movs	r0, #27
 8001938:	f000 face 	bl	8001ed8 <vt100_move>
	serial_puts("(moi perso ils me font peur)");
 800193c:	4827      	ldr	r0, [pc, #156]	; (80019dc <menu+0xd0>)
 800193e:	f000 f961 	bl	8001c04 <serial_puts>
	vt100_move(23, 6);
 8001942:	2106      	movs	r1, #6
 8001944:	2017      	movs	r0, #23
 8001946:	f000 fac7 	bl	8001ed8 <vt100_move>
	serial_puts("J'espère on a fait le bon choix...");
 800194a:	4825      	ldr	r0, [pc, #148]	; (80019e0 <menu+0xd4>)
 800194c:	f000 f95a 	bl	8001c04 <serial_puts>
	vt100_move(34, 10);
 8001950:	210a      	movs	r1, #10
 8001952:	2022      	movs	r0, #34	; 0x22
 8001954:	f000 fac0 	bl	8001ed8 <vt100_move>
	serial_puts("SPACE INVADERS");
 8001958:	4822      	ldr	r0, [pc, #136]	; (80019e4 <menu+0xd8>)
 800195a:	f000 f953 	bl	8001c04 <serial_puts>
	vt100_move(3, 22);
 800195e:	2116      	movs	r1, #22
 8001960:	2003      	movs	r0, #3
 8001962:	f000 fab9 	bl	8001ed8 <vt100_move>
	serial_puts("Réalisé par :");
 8001966:	4820      	ldr	r0, [pc, #128]	; (80019e8 <menu+0xdc>)
 8001968:	f000 f94c 	bl	8001c04 <serial_puts>
	vt100_move(3, 23);
 800196c:	2117      	movs	r1, #23
 800196e:	2003      	movs	r0, #3
 8001970:	f000 fab2 	bl	8001ed8 <vt100_move>
	serial_puts("Allan Piednoel");
 8001974:	481d      	ldr	r0, [pc, #116]	; (80019ec <menu+0xe0>)
 8001976:	f000 f945 	bl	8001c04 <serial_puts>

	//commencer le jeu via la pression d'une touche
	while (carac < 0)
 800197a:	e019      	b.n	80019b0 <menu+0xa4>
	{
		carac = serial_get_last_char();
 800197c:	f000 f958 	bl	8001c30 <serial_get_last_char>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <menu+0xe4>)
 8001986:	701a      	strb	r2, [r3, #0]
		vt100_move(23, 18);
 8001988:	2112      	movs	r1, #18
 800198a:	2017      	movs	r0, #23
 800198c:	f000 faa4 	bl	8001ed8 <vt100_move>
		serial_puts("appuyez sur n'importe quelle touche");
 8001990:	4818      	ldr	r0, [pc, #96]	; (80019f4 <menu+0xe8>)
 8001992:	f000 f937 	bl	8001c04 <serial_puts>

		sleep_moi(50);
 8001996:	2032      	movs	r0, #50	; 0x32
 8001998:	f7ff faf8 	bl	8000f8c <sleep_moi>
		vt100_move(23, 18);
 800199c:	2112      	movs	r1, #18
 800199e:	2017      	movs	r0, #23
 80019a0:	f000 fa9a 	bl	8001ed8 <vt100_move>
		serial_puts("                                      ");
 80019a4:	4814      	ldr	r0, [pc, #80]	; (80019f8 <menu+0xec>)
 80019a6:	f000 f92d 	bl	8001c04 <serial_puts>
		sleep_moi(50);
 80019aa:	2032      	movs	r0, #50	; 0x32
 80019ac:	f7ff faee 	bl	8000f8c <sleep_moi>
	while (carac < 0)
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <menu+0xe4>)
 80019b2:	f993 3000 	ldrsb.w	r3, [r3]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	dbe0      	blt.n	800197c <menu+0x70>

	}
	vt100_clear_screen();
 80019ba:	f000 fb09 	bl	8001fd0 <vt100_clear_screen>
	bordures();
 80019be:	f7ff fefa 	bl	80017b6 <bordures>
	perso(INIT_PERSO_X, INIT_PERSO_Y);
 80019c2:	2116      	movs	r1, #22
 80019c4:	2025      	movs	r0, #37	; 0x25
 80019c6:	f000 f82f 	bl	8001a28 <perso>
	jeu();
 80019ca:	f7ff fd7d 	bl	80014c8 <jeu>

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	08002134 	.word	0x08002134
 80019d8:	08002164 	.word	0x08002164
 80019dc:	08002194 	.word	0x08002194
 80019e0:	080021b4 	.word	0x080021b4
 80019e4:	080021d8 	.word	0x080021d8
 80019e8:	080021e8 	.word	0x080021e8
 80019ec:	080021f8 	.word	0x080021f8
 80019f0:	20000098 	.word	0x20000098
 80019f4:	08002208 	.word	0x08002208
 80019f8:	0800222c 	.word	0x0800222c

080019fc <ennemi_base>:
#include <stdint.h>



void ennemi_base(int x, int y)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	vt100_move(x, y);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fa61 	bl	8001ed8 <vt100_move>
	serial_puts("-|**|-");
 8001a16:	4803      	ldr	r0, [pc, #12]	; (8001a24 <ennemi_base+0x28>)
 8001a18:	f000 f8f4 	bl	8001c04 <serial_puts>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	08002254 	.word	0x08002254

08001a28 <perso>:

void perso(int x, int y)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	vt100_move(x, y);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fa4b 	bl	8001ed8 <vt100_move>
	serial_puts("_^|^_");
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <perso+0x28>)
 8001a44:	f000 f8de 	bl	8001c04 <serial_puts>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	0800225c 	.word	0x0800225c

08001a54 <boss>:

void boss(int x, int y)

{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	vt100_move(x, y);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fa35 	bl	8001ed8 <vt100_move>
	serial_puts("\\£/");
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <boss+0x28>)
 8001a70:	f000 f8c8 	bl	8001c04 <serial_puts>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	08002264 	.word	0x08002264

08001a80 <compteur_vies>:

void compteur_vies(int nb_vies)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
//
	int compteur;
	for (compteur = 0; compteur <= nb_vies - 1; compteur++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e013      	b.n	8001ab6 <compteur_vies+0x36>
	{
	vt100_move(2, 23);
 8001a8e:	2117      	movs	r1, #23
 8001a90:	2002      	movs	r0, #2
 8001a92:	f000 fa21 	bl	8001ed8 <vt100_move>
	serial_puts("vies restantes : ");
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <compteur_vies+0x6c>)
 8001a98:	f000 f8b4 	bl	8001c04 <serial_puts>
		perso(19 + 6 * compteur, 23);
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	3313      	adds	r3, #19
 8001aa8:	2117      	movs	r1, #23
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ffbc 	bl	8001a28 <perso>
	for (compteur = 0; compteur <= nb_vies - 1; compteur++)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dae6      	bge.n	8001a8e <compteur_vies+0xe>
	}
	vt100_move(19 + 6 * *ptr_vie_perso, 23);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <compteur_vies+0x70>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	0052      	lsls	r2, r2, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	3313      	adds	r3, #19
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2117      	movs	r1, #23
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f9fe 	bl	8001ed8 <vt100_move>
	serial_puts("     ");
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <compteur_vies+0x74>)
 8001ade:	f000 f891 	bl	8001c04 <serial_puts>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800226c 	.word	0x0800226c
 8001af0:	20000078 	.word	0x20000078
 8001af4:	08002280 	.word	0x08002280

08001af8 <serial_init>:

static volatile unsigned char last_char_read = 1;
static volatile char last_char;

void serial_init(const uint32_t baudrate)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Use USART2 with PA2 and PA3 */

	/* Enable clock for GPIOA and USART */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001b00:	2101      	movs	r1, #1
 8001b02:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b06:	f7fe fe73 	bl	80007f0 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7fe fe4f 	bl	80007b0 <RCC_AHB1PeriphClockCmd>

	/* init GPIOA 2 and 3 as alternate functions */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001b12:	230c      	movs	r3, #12
 8001b14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001b16:	2302      	movs	r3, #2
 8001b18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	4619      	mov	r1, r3
 8001b34:	481c      	ldr	r0, [pc, #112]	; (8001ba8 <serial_init+0xb0>)
 8001b36:	f7fe fcbb 	bl	80004b0 <GPIO_Init>

	/* Connect TX and RX pints to their alternate function pins */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <serial_init+0xb0>)
 8001b40:	f7fe fd44 	bl	80005cc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8001b44:	2207      	movs	r2, #7
 8001b46:	2103      	movs	r1, #3
 8001b48:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <serial_init+0xb0>)
 8001b4a:	f7fe fd3f 	bl	80005cc <GPIO_PinAFConfig>

	/* Configure USART parameters */
	USART_InitStruct.USART_BaudRate = baudrate;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001b52:	2300      	movs	r3, #0
 8001b54:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8001b56:	230c      	movs	r3, #12
 8001b58:	837b      	strh	r3, [r7, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8001b62:	2300      	movs	r3, #0
 8001b64:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART2, &USART_InitStruct);
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480f      	ldr	r0, [pc, #60]	; (8001bac <serial_init+0xb4>)
 8001b6e:	f7fe fe8b 	bl	8000888 <USART_Init>

	/* Configure interruption */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001b72:	2201      	movs	r2, #1
 8001b74:	f240 5125 	movw	r1, #1317	; 0x525
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <serial_init+0xb4>)
 8001b7a:	f7fe ff5f 	bl	8000a3c <USART_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8001b7e:	2326      	movs	r3, #38	; 0x26
 8001b80:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fb18 	bl	80001c8 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 8001b98:	2101      	movs	r1, #1
 8001b9a:	4804      	ldr	r0, [pc, #16]	; (8001bac <serial_init+0xb4>)
 8001b9c:	f7fe ff2e 	bl	80009fc <USART_Cmd>
}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40004400 	.word	0x40004400

08001bb0 <serial_putchar>:

void serial_putchar(const volatile char c)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	/* Check USART */
	if ((USART2->CR1 & USART_CR1_UE))
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <serial_putchar+0x50>)
 8001bbc:	899b      	ldrh	r3, [r3, #12]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d014      	beq.n	8001bf2 <serial_putchar+0x42>
	{
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 8001bc8:	bf00      	nop
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <serial_putchar+0x50>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f8      	beq.n	8001bca <serial_putchar+0x1a>
			;
		/* Send data */
		USART2->DR = (uint16_t) (c & 0x01FF);
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <serial_putchar+0x50>)
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	b292      	uxth	r2, r2
 8001be0:	809a      	strh	r2, [r3, #4]
		/* Wait to be ready, buffer empty */
		while (!(USART2->SR & USART_FLAG_TXE))
 8001be2:	bf00      	nop
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <serial_putchar+0x50>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f8      	beq.n	8001be4 <serial_putchar+0x34>
			;
	}
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40004400 	.word	0x40004400

08001c04 <serial_puts>:

void serial_puts(const volatile char *s)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	while (*s)
 8001c0c:	e007      	b.n	8001c1e <serial_puts+0x1a>
		serial_putchar(*s++);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ffc9 	bl	8001bb0 <serial_putchar>
	while (*s)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f2      	bne.n	8001c0e <serial_puts+0xa>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <serial_get_last_char>:

signed char serial_get_last_char(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
	if (last_char_read)
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <serial_get_last_char+0x2c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <serial_get_last_char+0x14>
		return -1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c42:	e006      	b.n	8001c52 <serial_get_last_char+0x22>
	else
	{
		last_char_read = 1;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <serial_get_last_char+0x2c>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
		return last_char;
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <serial_get_last_char+0x30>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	b25b      	sxtb	r3, r3
	}
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	200000a4 	.word	0x200000a4
 8001c60:	200000cf 	.word	0x200000cf

08001c64 <serial_input_not_empty>:

/* interruption management */

static int32_t serial_input_not_empty(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	return USART_GetITStatus(USART2, USART_IT_RXNE);
 8001c68:	f240 5125 	movw	r1, #1317	; 0x525
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <serial_input_not_empty+0x14>)
 8001c6e:	f7fe ff2d 	bl	8000acc <USART_GetITStatus>
 8001c72:	4603      	mov	r3, r0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40004400 	.word	0x40004400

08001c7c <serial_input_character>:

static char serial_input_character(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
	return USART2->DR;
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <serial_input_character+0x18>)
 8001c82:	889b      	ldrh	r3, [r3, #4]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40004400 	.word	0x40004400

08001c98 <USART2_IRQHandler>:

#define serial_it_handler USART2_IRQHandler
void serial_it_handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	if (serial_input_not_empty())
 8001c9c:	f7ff ffe2 	bl	8001c64 <serial_input_not_empty>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d008      	beq.n	8001cb8 <USART2_IRQHandler+0x20>
	{
		last_char = serial_input_character();
 8001ca6:	f7ff ffe9 	bl	8001c7c <serial_input_character>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <USART2_IRQHandler+0x24>)
 8001cb0:	701a      	strb	r2, [r3, #0]
		last_char_read = 0;
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <USART2_IRQHandler+0x28>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
	}
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200000cf 	.word	0x200000cf
 8001cc0:	200000a4 	.word	0x200000a4

08001cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cca:	e003      	b.n	8001cd4 <LoopCopyDataInit>

08001ccc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cd2:	3104      	adds	r1, #4

08001cd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cdc:	d3f6      	bcc.n	8001ccc <CopyDataInit>
  ldr  r2, =_sbss
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ce0:	e002      	b.n	8001ce8 <LoopFillZerobss>

08001ce2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ce2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ce4:	f842 3b04 	str.w	r3, [r2], #4

08001ce8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cec:	d3f9      	bcc.n	8001ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cee:	f000 f841 	bl	8001d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f000 f98f 	bl	8002014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7ff fd23 	bl	8001740 <main>
  bx  lr    
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d00:	080022ac 	.word	0x080022ac
  ldr  r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d08:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8001d0c:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8001d10:	20000158 	.word	0x20000158

08001d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC_IRQHandler>

08001d16 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <HardFault_Handler+0x4>

08001d2a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <MemManage_Handler+0x4>

08001d30 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <BusFault_Handler+0x4>

08001d36 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <UsageFault_Handler+0x4>

08001d3c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <SystemInit+0x60>)
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <SystemInit+0x60>)
 8001d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <SystemInit+0x64>)
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <SystemInit+0x64>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <SystemInit+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <SystemInit+0x64>)
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <SystemInit+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <SystemInit+0x64>)
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <SystemInit+0x68>)
 8001dae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <SystemInit+0x64>)
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <SystemInit+0x64>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <SystemInit+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001dc2:	f000 f80d 	bl	8001de0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <SystemInit+0x60>)
 8001dc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dcc:	609a      	str	r2, [r3, #8]
#endif
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	24003010 	.word	0x24003010

08001de0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	2300      	movs	r3, #0
 8001dec:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001dee:	4a36      	ldr	r2, [pc, #216]	; (8001ec8 <SetSysClock+0xe8>)
 8001df0:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <SetSysClock+0xe8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <SetSysClock+0xe8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3301      	adds	r3, #1
 8001e08:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <SetSysClock+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e16:	d1f0      	bne.n	8001dfa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <SetSysClock+0xe8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001e24:	2301      	movs	r3, #1
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	e001      	b.n	8001e2e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d142      	bne.n	8001eba <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001e34:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <SetSysClock+0xe8>)
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <SetSysClock+0xe8>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <SetSysClock+0xec>)
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <SetSysClock+0xec>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e4a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001e4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <SetSysClock+0xe8>)
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <SetSysClock+0xe8>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001e54:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <SetSysClock+0xe8>)
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <SetSysClock+0xe8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5e:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <SetSysClock+0xe8>)
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <SetSysClock+0xe8>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001e6a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <SetSysClock+0xe8>)
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <SetSysClock+0xf0>)
 8001e70:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001e72:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <SetSysClock+0xe8>)
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <SetSysClock+0xe8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001e7e:	bf00      	nop
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <SetSysClock+0xe8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f9      	beq.n	8001e80 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <SetSysClock+0xf4>)
 8001e8e:	f240 6205 	movw	r2, #1541	; 0x605
 8001e92:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001e94:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <SetSysClock+0xe8>)
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <SetSysClock+0xe8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <SetSysClock+0xe8>)
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <SetSysClock+0xe8>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
		while ((RCC->CFGR & (uint32_t) RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 8001eac:	bf00      	nop
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <SetSysClock+0xe8>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d1f9      	bne.n	8001eae <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	07405408 	.word	0x07405408
 8001ed4:	40023c00 	.word	0x40023c00

08001ed8 <vt100_move>:
#include "vt100.h"
#include "serie.h"

void vt100_move(uint8_t x, uint8_t y)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	71bb      	strb	r3, [r7, #6]
	serial_putchar(VT100_ESC);
 8001ee8:	201b      	movs	r0, #27
 8001eea:	f7ff fe61 	bl	8001bb0 <serial_putchar>
	serial_putchar('[');
 8001eee:	205b      	movs	r0, #91	; 0x5b
 8001ef0:	f7ff fe5e 	bl	8001bb0 <serial_putchar>
	serial_putchar('0' + (y / 100));
 8001ef4:	79bb      	ldrb	r3, [r7, #6]
 8001ef6:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <vt100_move+0xf0>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3330      	adds	r3, #48	; 0x30
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fe53 	bl	8001bb0 <serial_putchar>
	serial_putchar('0' + ((y / 10) % 10));
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <vt100_move+0xf4>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <vt100_move+0xf4>)
 8001f18:	fba3 1302 	umull	r1, r3, r3, r2
 8001f1c:	08d9      	lsrs	r1, r3, #3
 8001f1e:	460b      	mov	r3, r1
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	3330      	adds	r3, #48	; 0x30
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fe3e 	bl	8001bb0 <serial_putchar>
	serial_putchar('0' + (y % 10));
 8001f34:	79ba      	ldrb	r2, [r7, #6]
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <vt100_move+0xf4>)
 8001f38:	fba3 1302 	umull	r1, r3, r3, r2
 8001f3c:	08d9      	lsrs	r1, r3, #3
 8001f3e:	460b      	mov	r3, r1
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3330      	adds	r3, #48	; 0x30
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fe2e 	bl	8001bb0 <serial_putchar>
	serial_putchar(';');
 8001f54:	203b      	movs	r0, #59	; 0x3b
 8001f56:	f7ff fe2b 	bl	8001bb0 <serial_putchar>
	serial_putchar('0' + (x / 100));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <vt100_move+0xf0>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3330      	adds	r3, #48	; 0x30
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fe20 	bl	8001bb0 <serial_putchar>
	serial_putchar('0' + ((x / 10) % 10));
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <vt100_move+0xf4>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <vt100_move+0xf4>)
 8001f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f82:	08d9      	lsrs	r1, r3, #3
 8001f84:	460b      	mov	r3, r1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3330      	adds	r3, #48	; 0x30
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fe0b 	bl	8001bb0 <serial_putchar>
	serial_putchar('0' + (x % 10));
 8001f9a:	79fa      	ldrb	r2, [r7, #7]
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <vt100_move+0xf4>)
 8001f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa2:	08d9      	lsrs	r1, r3, #3
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3330      	adds	r3, #48	; 0x30
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fdfb 	bl	8001bb0 <serial_putchar>
	serial_putchar('H');
 8001fba:	2048      	movs	r0, #72	; 0x48
 8001fbc:	f7ff fdf8 	bl	8001bb0 <serial_putchar>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	51eb851f 	.word	0x51eb851f
 8001fcc:	cccccccd 	.word	0xcccccccd

08001fd0 <vt100_clear_screen>:

void vt100_clear_screen(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	serial_putchar(VT100_ESC);
 8001fd4:	201b      	movs	r0, #27
 8001fd6:	f7ff fdeb 	bl	8001bb0 <serial_putchar>
	serial_putchar('[');
 8001fda:	205b      	movs	r0, #91	; 0x5b
 8001fdc:	f7ff fde8 	bl	8001bb0 <serial_putchar>
	serial_putchar('2');
 8001fe0:	2032      	movs	r0, #50	; 0x32
 8001fe2:	f7ff fde5 	bl	8001bb0 <serial_putchar>
	serial_putchar('J');
 8001fe6:	204a      	movs	r0, #74	; 0x4a
 8001fe8:	f7ff fde2 	bl	8001bb0 <serial_putchar>
	serial_putchar(VT100_ESC);
 8001fec:	201b      	movs	r0, #27
 8001fee:	f7ff fddf 	bl	8001bb0 <serial_putchar>
	serial_putchar('[');
 8001ff2:	205b      	movs	r0, #91	; 0x5b
 8001ff4:	f7ff fddc 	bl	8001bb0 <serial_putchar>
	serial_putchar('?');
 8001ff8:	203f      	movs	r0, #63	; 0x3f
 8001ffa:	f7ff fdd9 	bl	8001bb0 <serial_putchar>
	serial_putchar('2');
 8001ffe:	2032      	movs	r0, #50	; 0x32
 8002000:	f7ff fdd6 	bl	8001bb0 <serial_putchar>
	serial_putchar('5');
 8002004:	2035      	movs	r0, #53	; 0x35
 8002006:	f7ff fdd3 	bl	8001bb0 <serial_putchar>
	serial_putchar('l');
 800200a:	206c      	movs	r0, #108	; 0x6c
 800200c:	f7ff fdd0 	bl	8001bb0 <serial_putchar>
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <__libc_init_array>:
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	4e0d      	ldr	r6, [pc, #52]	; (800204c <__libc_init_array+0x38>)
 8002018:	4c0d      	ldr	r4, [pc, #52]	; (8002050 <__libc_init_array+0x3c>)
 800201a:	1ba4      	subs	r4, r4, r6
 800201c:	10a4      	asrs	r4, r4, #2
 800201e:	2500      	movs	r5, #0
 8002020:	42a5      	cmp	r5, r4
 8002022:	d109      	bne.n	8002038 <__libc_init_array+0x24>
 8002024:	4e0b      	ldr	r6, [pc, #44]	; (8002054 <__libc_init_array+0x40>)
 8002026:	4c0c      	ldr	r4, [pc, #48]	; (8002058 <__libc_init_array+0x44>)
 8002028:	f000 f818 	bl	800205c <_init>
 800202c:	1ba4      	subs	r4, r4, r6
 800202e:	10a4      	asrs	r4, r4, #2
 8002030:	2500      	movs	r5, #0
 8002032:	42a5      	cmp	r5, r4
 8002034:	d105      	bne.n	8002042 <__libc_init_array+0x2e>
 8002036:	bd70      	pop	{r4, r5, r6, pc}
 8002038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800203c:	4798      	blx	r3
 800203e:	3501      	adds	r5, #1
 8002040:	e7ee      	b.n	8002020 <__libc_init_array+0xc>
 8002042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002046:	4798      	blx	r3
 8002048:	3501      	adds	r5, #1
 800204a:	e7f2      	b.n	8002032 <__libc_init_array+0x1e>
 800204c:	080022a4 	.word	0x080022a4
 8002050:	080022a4 	.word	0x080022a4
 8002054:	080022a4 	.word	0x080022a4
 8002058:	080022a8 	.word	0x080022a8

0800205c <_init>:
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205e:	bf00      	nop
 8002060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002062:	bc08      	pop	{r3}
 8002064:	469e      	mov	lr, r3
 8002066:	4770      	bx	lr

08002068 <_fini>:
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	bf00      	nop
 800206c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206e:	bc08      	pop	{r3}
 8002070:	469e      	mov	lr, r3
 8002072:	4770      	bx	lr
